name: Build and Publish Flutter Module

on:
  push:
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write
  packages: write

env:
  FLUTTER_VERSION: "3.27.4"
  NODE_VERSION: "18"

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install CMake and NDK
        run: |
          echo "Installing CMake and NDK for native builds..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "cmake;3.22.1"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.1.8937393"

          # Verificar se CMake foi instalado
          if [ -f "$ANDROID_HOME/cmake/3.22.1/bin/ninja" ]; then
            echo "✅ CMake 3.22.1 instalado com sucesso"
          else
            echo "❌ CMake 3.22.1 não encontrado, tentando instalação alternativa..."
            $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep cmake
          fi

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Get dependencies for packages
        run: |
          cd packages
          for project in */ ; do
            if [ -d "$project" ]; then
              echo "Getting dependencies for $project..."
              cd "$project"
              flutter pub get
              if [ -d "example" ]; then
                cd example
                flutter pub get
                cd ..
              fi
              cd ..
            fi
          done

      - name: Clean build artifacts
        run: |
          rm -rf .android/Flutter/build .android/app/build .android/.gradle
          rm -rf .ios/Flutter/build .ios/Pods
          find . -name "kernel_blob.bin" -delete 2>/dev/null || true

      - name: Build Android AAR
        timeout-minutes: 60
        run: |
          # Configurar ambiente para builds grandes
          export GRADLE_OPTS="-Xmx6G -XX:MaxMetaspaceSize=4G -Dorg.gradle.daemon=false"
          export JAVA_OPTS="-Xmx6G"

          # Configurar paths para CMake/NDK
          export ANDROID_NDK_ROOT="$ANDROID_HOME/ndk/25.1.8937393"
          export CMAKE_ANDROID_NDK="$ANDROID_HOME/ndk/25.1.8937393"

          # Criar diretório .android se não existir
          if [ ! -d ".android" ]; then
            echo "📁 Criando diretório .android..."
            mkdir -p .android
            flutter create --template=module --platforms=android .
          fi

          # Executar build
          chmod +x scripts/android_build_module.sh
          echo "🚀 Iniciando build Android AAR..."
          ./scripts/android_build_module.sh

          echo "✅ Script de build Android completou"
          echo "⏳ Aguardando sincronização final..."
          sleep 3

      - name: Verify Android build
        run: |
          if [ ! -d "build/host/outputs/repo" ]; then
            echo "❌ Android build failed - repo directory not found"
            exit 1
          fi
          echo "✅ Android build successful"

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: build/host/outputs/repo/
          retention-days: 30

  build-ios:
    runs-on: macos-latest
    timeout-minutes: 90
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup CocoaPods
        run: |
          sudo gem install cocoapods
          pod setup

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Get dependencies for packages
        run: |
          cd packages
          for project in */ ; do
            if [ -d "$project" ]; then
              echo "Getting dependencies for $project..."
              cd "$project"
              flutter pub get
              if [ -d "example" ]; then
                cd example
                flutter pub get
                cd ..
              fi
              cd ..
            fi
          done

      - name: Clean build artifacts
        run: |
          rm -rf .android/Flutter/build .android/app/build .android/.gradle
          rm -rf .ios/Flutter/build .ios/Pods
          find . -name "kernel_blob.bin" -delete 2>/dev/null || true

      - name: Build iOS Framework
        timeout-minutes: 60
        run: |
          chmod +x scripts/build_modules_ios.sh
          ./scripts/build_modules_ios.sh

      - name: Verify iOS build
        run: |
          if [ ! -d "build/ios/framework" ]; then
            echo "❌ iOS build failed - framework directory not found"
            exit 1
          fi
          echo "✅ iOS build successful"
          find build/ios/framework -name "*.framework" -o -name "*.xcframework" | head -10

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifacts
          path: build/ios/framework/
          retention-days: 30

  publish:
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://npm.pkg.github.com"
          scope: "@felipeduarte26"

      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-artifacts
          path: android/repo/

      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-artifacts
          path: ios/

      - name: Create package structure
        run: |
          # Criar diretórios necessários
          mkdir -p android/repo ios/

          # Limpar arquivos desnecessários dos artifacts iOS
          echo "🧹 Limpando arquivos desnecessários..."
          find ios/ -name "XCBuildData" -type d -exec rm -rf {} + 2>/dev/null || true
          find ios/ -name "build.db" -delete 2>/dev/null || true
          find ios/ -name "*.dSYM" -type d -exec rm -rf {} + 2>/dev/null || true
          find ios/ -path "*/Debug/*" -delete 2>/dev/null || true
          find ios/ -path "*/iphonesimulator/*" -not -name "*.framework" -not -name "*.xcframework" -delete 2>/dev/null || true

          # Verificar se os artifacts foram baixados corretamente
          echo "📦 Verificando artifacts Android:"
          ls -la android/repo/ | head -10

          echo "📦 Verificando artifacts iOS:"
          find ios/ -name "*.framework" -o -name "*.xcframework" | head -10

      - name: Generate package version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="1.0.0-${GITHUB_SHA::8}"
          fi
                    echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Update package.json version
        run: |
          # 🔍 VALIDAÇÃO INTELIGENTE DE VERSÃO
          # Evita erro "Version not changed" quando alguém já atualizou manualmente

          TAG_VERSION="${{ steps.version.outputs.version }}"
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          echo "🏷️  Versão da tag: $TAG_VERSION"
          echo "📄 Versão atual no package.json: $CURRENT_VERSION"

          # Verificar se são diferentes
          if [ "$CURRENT_VERSION" != "$TAG_VERSION" ]; then
            echo "🔄 Atualizando versão de $CURRENT_VERSION para $TAG_VERSION"
            npm version $TAG_VERSION --no-git-tag-version
            echo "✅ Versão atualizada com sucesso"
          else
            echo "✅ Versão já está correta ($CURRENT_VERSION), nenhuma atualização necessária"
          fi

          # Alternativas mais robustas (comentadas):
          # OPÇÃO 2 - Sempre funciona com sed:
          # sed -i 's/"version": "[^"]*"/"version": "'$TAG_VERSION'"/' package.json
          #
          # OPÇÃO 3 - Com Node.js diretamente:
          # node -e "const pkg=require('./package.json'); pkg.version='$TAG_VERSION'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2))"

      - name: Create additional files
        run: |
          # Criar index.js
          cat > index.js << 'EOF'
          module.exports = {
            name: '@felipeduarte26/waapi-module',
            version: require('./package.json').version,
            android: {
              repoPath: './android/repo',
              groupId: 'com.wiipo.waapi_module',
              artifactId: 'flutter',
              version: '1.0'
            },
            ios: {
              frameworkPath: './ios',
              podspecName: 'WaapiModule'
            }
          };
          EOF

          # Criar react-native.config.js
          cat > react-native.config.js << 'EOF'
          module.exports = {
            dependency: {
              platforms: {
                android: {
                  sourceDir: '../android',
                  packageImportPath: 'import com.wiipo.waapi_module.WaapiModulePlugin;',
                },
                ios: {
                  podspecPath: '../WaapiModule.podspec',
                },
              },
            },
          };
          EOF

          # Criar WaapiModule.podspec
          cat > WaapiModule.podspec << EOF
          Pod::Spec.new do |s|
            s.name             = 'WaapiModule'
            s.version          = '${{ steps.version.outputs.version }}'
            s.summary          = 'Flutter Waapi Module for React Native'
            s.description      = 'Wiipo Waapi Flutter module integration for React Native projects'
            s.homepage         = 'https://github.com/felipeduarte26/waapi-flutter-module'
            s.license          = { :type => 'MIT', :file => 'LICENSE' }
            s.author           = { 'Wiipo' => 'dev@wiipo.com' }
            s.source           = { :git => 'https://github.com/felipeduarte26/waapi-flutter-module.git', :tag => s.version.to_s }

            s.ios.deployment_target = '16.0'
            s.requires_arc = true

            # Incluir todos os frameworks do diretório ios/
            s.ios.vendored_frameworks = 'ios/**/*.{framework,xcframework}'
            
            # Dependências básicas
            s.dependency 'Flutter'
            s.dependency 'FlutterPluginRegistrant'
          end
          EOF

      - name: Check package size
        run: |
          echo "📊 Verificando tamanho do pacote..."
          npm pack --dry-run | tail -20

          # Verificar tamanho total
          TOTAL_SIZE=$(du -sh . | cut -f1)
          echo "📦 Tamanho total do diretório: $TOTAL_SIZE"

          # Contar arquivos
          FILE_COUNT=$(find . -type f | wc -l)
          echo "📂 Total de arquivos: $FILE_COUNT"

      - name: Publish to GitHub Packages
        run: |
          echo "📦 Publishing package to GitHub Packages..."
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Flutter Waapi Module v${{ steps.version.outputs.version }}

            ### ✨ What's Included
            - ✅ **Android AAR artifacts** with all variants (debug, profile, release)
            - ✅ **iOS Framework artifacts** with XCFrameworks
            - ✅ **Complete Maven repository** (~300MB)
            - ✅ **Enhanced logging** and build improvements

            ### 📦 Installation
            ```bash
            # Configure .npmrc or .yarnrc.yml for GitHub Packages
            echo "@felipeduarte26:registry=https://npm.pkg.github.com" >> .npmrc
            echo "//npm.pkg.github.com/:_authToken=YOUR_GITHUB_TOKEN" >> .npmrc

            # Install package
            npm install @felipeduarte26/waapi-module@${{ steps.version.outputs.version }}
            # or
            yarn add @felipeduarte26/waapi-module@${{ steps.version.outputs.version }}
            ```

            ### 🔧 React Native Integration
            Add to `android/app/build.gradle`:
            ```gradle
            repositories {
              maven { url "$rootDir/../node_modules/@felipeduarte26/waapi-module/android/repo" }
            }
            dependencies {
              debugImplementation 'com.wiipo.waapi_module:flutter_debug:1.0'
              profileImplementation 'com.wiipo.waapi_module:flutter_profile:1.0'
              releaseImplementation 'com.wiipo.waapi_module:flutter_release:1.0'
            }
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
